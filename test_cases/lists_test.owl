module lists_test {

  fn test_nth() {
    let int_list = [1, 2, 3]
    owl_unit:assert_eq(list:nth(int_list, 2), 3)
    owl_unit:assert_eq(list:nth(int_list, 15), nil)

    let str_list = ["one", "two", "three"]
    owl_unit:assert_eq(list:nth(str_list, 1), "two")
    owl_unit:assert_eq(list:nth(str_list, 99), nil)
  }

  fn test_count() {
    let int_list = [1, 2, 3]
    owl_unit:assert_eq(list:count(int_list), 3)

    let str_list = ["one"]
    owl_unit:assert_eq(list:count(str_list), 1)
  }

  fn test_first() {
    owl_unit:assert_eq(list:first([1, 2]), 1)
    owl_unit:assert_eq(list:first(["one"]), "one")
    owl_unit:assert_eq(list:first([]), nil)
  }

  fn test_last() {
    owl_unit:assert_eq(list:last([1, 2]), 2)
    owl_unit:assert_eq(list:last(["one"]), "one")
    owl_unit:assert_eq(list:last([]), nil)
  }

  fn test_rest() {
    owl_unit:assert_eq(list:rest([1, 2]), [2])
    owl_unit:assert_eq(list:rest(["one"]), [])
    owl_unit:assert_eq(list:rest([]), [])
  }

  fn test_slice() {
    let list = [1, 2, 3]
    owl_unit:assert_eq(list:slice(list, 0, 3), list)
    owl_unit:assert_eq(list:slice(list, 0, 10), list)

    owl_unit:assert_eq(list:slice(list, 0, 2), [1, 2])
    owl_unit:assert_eq(list:slice(list, 0, 1), [1])
    owl_unit:assert_eq(list:slice(list, 0, 0), [])

    owl_unit:assert_eq(list:slice(list, 1, 3), [2, 3])
    owl_unit:assert_eq(list:slice(list, 2, 3), [3])
    owl_unit:assert_eq(list:slice(list, 3, 3), [])
  }

  fn main() {
    owl_unit:assert_eq([1, 2], [1, 2])
    owl_unit:refute_eq([1, 2], [9, 10])

    owl_unit:assert_eq(["one", "two"], ["one", "two"])
    owl_unit:refute_eq(["one", "two"], ["one", "not two"])

    test_nth()
    test_count()
    test_first()
    test_last()
    test_rest()
    test_slice()
  }
}
