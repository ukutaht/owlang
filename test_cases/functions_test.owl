module Functions {
  fn gimme_six() {
    6
  }
}

module FunctionsTest {
  fn gimme_five() {
    2 + 3
  }

  fn add_five(num) {
    num + 5
  }

  fn add_together(a, b) {
    a + b
  }

  fn empty_function() {}

  fn mccarthy(n) {
    if n > 100 {
      n - 10
    } else {
      mccarthy(mccarthy(n + 11))
    }
  }

  fn arity_test() {
    0
  }

  fn arity_test(one) {
    1
  }

  fn arity_test(one, two) {
    2
  }

  fn capture_gimme_six() {
    Functions.gimme_six\0
  }

  fn apply_to_six(fun) {
    fun(6)
  }

  fn test_functions() {
    OwlUnit.assert_eq(gimme_five(), 5)
    OwlUnit.assert_eq(add_five(5), 10)
    OwlUnit.assert_eq(add_together(7, 11), 18)
    OwlUnit.assert_eq(Functions.gimme_six(), 6)
    OwlUnit.assert_eq(empty_function(), nil)

    OwlUnit.assert_eq(mccarthy(5), 91)
    OwlUnit.assert_eq(mccarthy(103), 93)

    OwlUnit.assert_eq(arity_test(), 0)
    OwlUnit.assert_eq(arity_test(1), 1)
    OwlUnit.assert_eq(arity_test(1, 2), 2)

    let captured_gimme_five = gimme_five\0
    OwlUnit.assert_eq(captured_gimme_five(), 5)

    let captured_gimme_six = capture_gimme_six()
    OwlUnit.assert_eq(captured_gimme_six(), 6)

    let captured_add_five = add_five\1
    OwlUnit.assert_eq(apply_to_six(captured_add_five), 11)
  }

  fn return_adder() {
    (a, b) -> { a + b }
  }

  fn test_anonymous_functions() {
    let gimme_three = () -> { 1 + 2 }
    OwlUnit.assert_eq(gimme_three(), 3)

    let adder = (a, b) -> { a + b }
    OwlUnit.assert_eq(adder(2, 3), 5)

    let returned_adder = return_adder()
    OwlUnit.assert_eq(returned_adder(2, 3), 5)
  }

  fn curried_adder(x) {
    (y) -> {
      x + y
    }
  }

  fn list_giver() {
    let list = [1, 2]

    () -> {
      list
    }
  }

  fn nested_curried_adder(a) {
    (b, c) -> {
      (d) -> {
        a + b + c + d
      }
    }
  }

  fn test_closures() {
    let add5 = curried_adder(5)
    let getlist = list_giver()

    OwlUnit.assert_eq(add5(6), 11)
    OwlUnit.assert_eq(getlist(), [1, 2])
    let add3 = nested_curried_adder(3)
    let add10 = add3(4, 3)
    OwlUnit.assert_eq(add10(3), 13)
  }
}
