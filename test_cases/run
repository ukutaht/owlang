#!/usr/bin/env ruby
#
require 'pathname'

class Formatter
  class << self
    def format_success(filename, output)
      puts(green("· " + filename))
      output.lines.each do |line|
        print("    " + line)
      end
    end

    def format_failure(filename, output)
      puts(red("× " + filename))
      output.lines.each do |line|
        print("    " + red(line))
      end
    end

    private

    def green(string)
      "\e[32m#{string}\e[0m"
    end

    def red(string)
      "\e[31m#{string}\e[0m"
    end
  end
end

ROOT_DIR     = File.join(File.expand_path(File.dirname(__FILE__)), "..")
COMPILER_DIR = File.join(ROOT_DIR, "COMPILER")
VM_DIR       = File.join(ROOT_DIR, "vm")
TEST_TARGET  = File.join(ROOT_DIR, "test_cases/.build")

COMPILER = File.join(COMPILER_DIR, "target/debug/owlc")
VM       = File.join(VM_DIR, "target/debug/vm")

def run_file(file)
  compile_output = `#{COMPILER} #{file} -o #{TEST_TARGET} 2>&1`
  if $?.exitstatus != 0
    Formatter.format_failure(File.basename(file), compile_output)
    return
  end

  built_filename = Pathname.new(file).basename.sub_ext(".owlc")
  built = File.join(TEST_TARGET, built_filename)

  output = `#{VM} #{built}`

  if $?.exitstatus == 0
    Formatter.format_success(File.basename(file), output)
  else
    Formatter.format_failure(File.basename(file), output)
  end
end

def run_all
  ENV["OWL_LOAD_PATH"] = TEST_TARGET
  puts "Running make"
  make_out = `make`

  if $?.exitstatus != 0
    return
  end

  tests = File.join(ROOT_DIR, "test_cases/**/*_test.owl")

  Dir.glob(tests).each do |test_file|
    run_file(test_file)
  end
end

run_all
