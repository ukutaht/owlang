module List {
  fn nth(list, index) {
    list_nth(list, index)
  }

  fn count(list) {
    list_count(list)
  }

  fn empty?(list) {
    count(list) == 0
  }

  fn first(list) {
    nth(list, 0)
  }

  fn last(list) {
    nth(list, count(list) - 1)
  }

  fn rest(list) {
    slice(list, 1, count(list))
  }

  fn push(list, elem) {
    list ++ [elem]
  }

  fn filter(list, predicate) {
    reduce(list, [], (acc, elem) => {
      if predicate(elem) {
        push(acc, elem)
      } else {
        acc
      }
    })
  }

  fn reduce(list, acc, fun) {
    if empty?(list) {
      acc
    } else {
      let first = first(list)
      let rest = rest(list)

      reduce(rest, fun(acc, first), fun)
    }
  }

  fn each(list, function) {
    if !empty?(list) {
      let first = first(list)
      let rest = rest(list)

      function(first)
      each(rest, function)
    }
  }

  fn contains?(list, elem) {
    if empty?(list) {
      false
    } else {
      if first(list) == elem {
        true
      } else {
        contains?(rest(list), elem)
      }
    }
  }

  fn slice(list, from, to) {
    list_slice(list, from, to)
  }
}
