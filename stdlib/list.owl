module list {
  fn nth(list, index) {
    list_nth(list, index)
  }

  fn count(list) {
    list_count(list)
  }

  fn empty?(list) {
    count(list) == 0
  }

  fn first(list) {
    nth(list, 0)
  }

  fn last(list) {
    nth(list, count(list) - 1)
  }

  fn rest(list) {
    slice(list, 1, count(list))
  }

  fn filter(list, predicate) {
    if empty?(list) {
      list
    } else {
      let first = first(list)
      let rest = rest(list)

      if predicate(first) {
        [first] ++ filter(rest, predicate)
      } else {
        filter(rest, predicate)
      }
    }
  }

  fn slice(list, from, to) {
    list_slice(list, from, to)
  }
}
